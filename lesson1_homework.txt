Подготовка к собеседованию веб-разработчика.
Урок 1. PHP – основные понятия. Домашняя работа.

1. В чем заключается суть ключевого слова global? Когда его применение целесообразно?

Ключевое слово global позволяет обращаться  к глобальной переменной из локальной области 
видимости (например, внутри функции).
Пример из документации:
<?php
$a = 1;
$b = 2;

function Sum()
{
    global $a, $b;

    $b = $a + $b;
} 

Sum();
echo $b; // Результат: 3
?>
Без ключевого слова global, внутри функции создадутся переменные с таакими же именами, которые 
будут доступны только в пределах локальной области видимости - функции Sum().

Вообще почти везде написано, что использование global не оправдано, лучше использовать другие решения.
Буду благодарен, если подскажете, где целесообразно применять global.


2. Какие суперглобальные переменные вы знаете?

$GLOBALS - ассоциативный массив, который содержит ссылки на все переменные глобальной области видимости.
            Обращение к глобальной переменной: $GLOBALS["var"].
$_SERVER - массив, содержащий информацию о сервере и среде исполнения. Например, $_SERVER['HTTP_USER_AGENT'] - 
            информация о браузере, который открыл данную страницу.
$_GET - ассоциативный массив переменных, переданных скрипту через параметры URL. 
            Пример: URL: http://mysite.com/personal/?name=Илья&age=28. $_GET['name'], $_GET['age']
$_POST - ассоциативный массив данных, переданных скрипту через HTTP методом POST. $_POST['name'], $_POST['age']
            Поддерживает загрузку файлов.
$_FILES - ассоциативный массив, содержащий переменные файлов, загруженных в текущий скрипт через метод HTTP POST.
            Пример: $_FILES['название_файла']['name'] - оригинальное имя файла на компьютере клиента
$_COOKIE - ассоциативный массив значений, переданных скрипту через HTTP Cookies. Пример: $_COOKIE['username']. 
$_SESSION - ассоциативный массив, содержащий переменные сессии
$_REQUEST - ассоциативный массив, который включает в себя содержимое переменных $_GET, $_POST и $_COOKIE
$_ENV - ассоциативный массив значений, переданных скрипту через переменные окружения.


3. Когда нужно использовать закрывающий дескриптор “?>“?

Когда в файле больше одного блока кода PHP и присутствует код на другом языке. Например, при такой структуре файла:
<?php Какой-то php код?>

<div>
    <h1>Какой-нибудь HTML</h1>
</div>

<?php Какой-то php код?>

<div>
    <p>Какой-нибудь HTML, а внутри 
        <?= ещё какой-то php код?>
    </p>
</div>

Если в файле только php код закрывающий дескриптор не требуется.


4. Что выведет программа в каждом случае и почему?
function changeX($x){
   $x += 5;
   echo $x;
}
$x = 1;
echo $x;            // 1 - здесь выводится значение глобальной переменной $x
changeX($x);        // 6 - в функцию, как атрибут передаётся значение глобальной переменной $x = 1.
                            создаётся локальная переменная $x и ей присваивается значение 1, и потом к нему прибавляется 5.
                            Результат: 6, при этом значение глобальной переменной $x остаётся неизменной и равно 1.
echo $x;            // 1 - вновь выводится значение глобальной переменной, которая по прежнему равна 1


5. Что выведет программа в каждом случае и почему?
function test()
{
    static $a = 0;
    echo $a;
    $a++;
}
test();     // 0 - выводится изначальное значение $a = 0, после чего значение $a увеличивается на 1.
test();     // 1 - благодаря ключевому слову static значение переменной сохраняется после окончания работы функции, 
                    и вместо присваивания(в нашем случае 0) переменная получает сохраненное ранее значение(после первого вызова $a = 1)
                    В конце работы функции значение $a вновь увеличивается на 1
test();     // 2 - по той же причине, описанной выше. В общем магия слова static. Без него во всех 3 случаях выводился бы ноль, так как при
                    каждом вызове функции переvенной $a присваивалось бы значение 0.


6. Как перевернуть массив? Есть массив array(‘h’, ‘e’, ‘l’, ‘l’, ‘o’), как из него получить array(‘o’, ‘l’, ‘l’, ‘e’, ‘h’)? 

Наверное самый простой способ: array_reverse(['h', 'e', 'l', 'l', 'o']);


7. Как перевернуть строку задом наперед?

Тоже, самое простое использовать встроенную в php функцию strrev();
Пример: echo strrev('aylI');    // Выведет: Ilya


8. Что будет результатом работы данного кода?
$a=0;
if($b=$a)       
    echo "One";
else
    echo "Two";

Результат: Two. Вначале необходимо вычислить результат выражения $b=$a($b = 0). Затем привести типы к boolean: 0 == false. А т.к. условие ложно 
выполняется блок else.


9. Сгенерировать три случайных числа в диапазоне от 0 до 10. Если сумма этих чисел меньше 15, сгенерировать новую тройку.

$numbers = [0,0,0];
$steps = [];
do {
    foreach ($numbers as $key => $value) {
        $numbers[$key] = random_int(0, 10);
    }
    $steps[] = $numbers;
    $sum = array_sum($numbers);
} while ($sum < 15);
print_r($steps);


10. Какое число выведет данный код?
$i = 10;
$i += ++$i + $i + $i++; // 45
echo $i;

Тут честно сказать я не с первого раза правильно посчитал... В общем действия по порядку:
1. ++$i Прединкремент, теперь $i = 11
2. $i + $i+ $i. Сложение 11+11+11=33
3. $i++. Постинкремент, и теперь $i = 12
4. $i += 33. Последнее сложение 12+33 = 45


11. Что выведет приведенный ниже код?
$a = "1";
$a[$a] = "2";
echo $a; // "12"

В php есть возможность обращаться к символам строки, также как к элементам массива. Отсчёт индексов начинается с 0
Изначально у нас строка из одного символа т.е. $a[0] = "1"
Следующее действие $a[$a] = "2" или $a[1] = "2". Здесь мы добавили второй символ к строке (с индексом 1)
В итоге на экран выводится  строка из 2-ух символов: "12"